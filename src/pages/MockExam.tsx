import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Clock, BookOpen, Play, Filter, GraduationCap, Target, Settings, CheckCircle, ArrowRight, Home } from 'lucide-react';
import { useNavigate } from 'react-router-dom';


const StartScreen = () => {
  // Add scrollbar stability on component mount
  useEffect(() => {
    // Ensure scrollbar is always visible to prevent layout shifts
    document.documentElement.style.overflowY = 'scroll';
    
    return () => {
      // Cleanup on unmount
      document.documentElement.style.overflowY = '';
    };
  }, []);

  // Load saved settings from localStorage
  const loadSavedSettings = () => {
    try {
      const saved = localStorage.getItem('examSettings');
      if (saved) {
        return JSON.parse(saved);
      }
    } catch (error) {
      console.error('Error loading saved settings:', error);
    }
    return {
      examMode: 'sectioned',
      timerMode: 'none',
      selectedTimerDuration: 13,
      questionTypeFilter: 'all',
      selectedQuestionType: 'analogy',
      rcQuestionOrder: 'sequential'
    };
  };

  // Local state for configuration with saved settings
  const [settings, setSettings] = useState(loadSavedSettings());
  const {
    examMode,
    timerMode,
    selectedTimerDuration,
    questionTypeFilter,
    selectedQuestionType,
    rcQuestionOrder
  } = settings;

  // Save settings to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('examSettings', JSON.stringify(settings));
  }, [settings]);

  const updateSetting = (key, value) => {
    setSettings(prev => ({ ...prev, [key]: value }));
  };

  const questionTypes = [
    { value: 'analogy', label: 'ุงูุชูุงุธุฑ ุงูููุธู', icon: '๐', description: 'ุงูุนูุงูุงุช ุจูู ุงููููุงุช' },
    { value: 'completion', label: 'ุฅููุงู ุงูุฌูู', icon: '๐', description: 'ููุก ุงููุฑุงุบุงุช ุงูููุงุณุจุฉ' },
    { value: 'error', label: 'ุงูุฎุทุฃ ุงูุณูุงูู', icon: '๐', description: 'ุชุญุฏูุฏ ุงูุฃุฎุทุงุก ุงููุบููุฉ' },
    { value: 'rc', label: 'ุงุณุชูุนุงุจ ุงูููุฑูุก', icon: '๐', description: 'ููู ุงููุตูุต ูุงูููุงุทุน' },
    { value: 'odd', label: 'ุงูููุฑุฏุฉ ุงูุดุงุฐุฉ', icon: '๐ฏ', description: 'ุชุญุฏูุฏ ุงููููุฉ ุงููุฎุชููุฉ' }
  ];

  const [showExamScreen, setShowExamScreen] = useState(false);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  // ูุงุญููุง: ุณูุญููู ุงูุฃุณุฆูุฉ ุงูุญููููุฉ ุญุณุจ ุงูุฅุนุฏุงุฏุงุช
  const dummyQuestions = [
    { question: 'ูุง ูู ุฌูุน ูููุฉ "ูุชุงุจ"ุ', options: ['ูุชุจ', 'ูุชุงุจุงุช', 'ูุชุงุจูู', 'ูุชุจุฉ'], answer: 0 },
    { question: 'ูุง ูุฑุงุฏู ูููุฉ "ุณุนูุฏ"ุ', options: ['ุญุฒูู', 'ูุฑุญุงู', 'ุบุงุถุจ', 'ูุชุนุจ'], answer: 1 },
  ];

  const navigate = useNavigate();

  const handleStartExam = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
    navigate('/mock-exam/exam', { state: settings });
  };

  const handleTimerModeChange = (mode) => {
    updateSetting('timerMode', mode);
  };

  const handleTimerDurationChange = (duration) => {
    updateSetting('selectedTimerDuration', parseInt(duration));
  };

  const getQuestionTypeInfo = () => {
    return questionTypes.find(type => type.value === selectedQuestionType);
  };

  // Helper function to get the display text for selected question type
  const getSelectedQuestionTypeDisplay = () => {
    const selectedType = questionTypes.find(type => type.value === selectedQuestionType);
    return selectedType ? selectedType.label : 'ุงุฎุชุฑ ููุน ุงูุฃุณุฆูุฉ';
  };

  // Helper function to get the display text for selected timer duration
  const getSelectedTimerDurationDisplay = () => {
    return `${selectedTimerDuration} ุฏูููุฉ`;
  };

  if (showExamScreen) {
    const q = dummyQuestions[currentQuestionIndex];
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-purple-100 flex flex-col items-center justify-center" dir="rtl">
        <div className="w-full max-w-xl bg-white/90 rounded-2xl shadow-2xl p-8 mt-12">
          <div className="flex justify-between items-center mb-6">
            <span className="text-sm text-gray-500">ุณุคุงู {currentQuestionIndex + 1} ูู {dummyQuestions.length}</span>
            <button className="text-xs text-purple-600 underline" onClick={() => setShowExamScreen(false)}>ุนูุฏุฉ ููุฅุนุฏุงุฏุงุช</button>
          </div>
          <div className="mb-6 text-lg font-bold text-gray-900">{q.question}</div>
          <div className="space-y-3 mb-8">
            {q.options.map((opt, i) => (
              <div key={i} className="flex items-center gap-2">
                <input type="radio" name="answer" id={`opt${i}`} className="accent-purple-600" />
                <label htmlFor={`opt${i}`}>{opt}</label>
              </div>
            ))}
          </div>
          <div className="flex justify-between">
            <button
              className="px-4 py-2 rounded-lg bg-gray-200 text-gray-700 disabled:opacity-50"
              onClick={() => setCurrentQuestionIndex(i => i - 1)}
              disabled={currentQuestionIndex === 0}
            >
              ุงูุณุงุจู
            </button>
            <button
              className="px-4 py-2 rounded-lg bg-purple-600 text-white disabled:opacity-50"
              onClick={() => setCurrentQuestionIndex(i => i + 1)}
              disabled={currentQuestionIndex === dummyQuestions.length - 1}
            >
              ุงูุชุงูู
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-purple-100" dir="rtl">
      {/* Hero Header */}
      <div className="relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-blue-900 via-indigo-900 to-purple-900"></div>
        <div className="absolute inset-0 bg-black/20"></div>
        <div className="relative max-w-7xl mx-auto px-6 py-20 text-center">
          <div className="flex justify-center mb-6">
            <div className="bg-white/10 backdrop-blur-sm rounded-full p-6">
              <GraduationCap className="h-16 w-16 text-white" />
            </div>
          </div>
          <h1 className="text-5xl md:text-6xl font-bold text-white mb-6 leading-tight">
            ูุฑูุฒ ุงุฎุชุจุงุฑุงุช ุงูููุธู
          </h1>
          <p className="text-xl text-blue-100 mb-8 max-w-3xl mx-auto leading-relaxed">
            ูููุน ูุชูุงูู ูุงุฎุชุจุงุฑุงุช ุงููุฏุฑุงุช ุงูููุธูุฉ ูุน ุฃุฏูุงุช ูุชูุฏูุฉ ููุชุฏุฑูุจ ูุงูุชูููู
          </p>
          <div className="flex justify-center gap-8 text-blue-100">
            <div className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5" />
              <span>ุฃูุซุฑ ูู 6000+ ุณุคุงู</span>
            </div>
            <div className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5" />
              <span>6 ุฃูุณุงู ูุฎุตุตุฉ</span>
            </div>
            <div className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5" />
              <span>ุชูููู ููุฑู</span>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 py-16 sm:px-6 lg:px-8">
        {/* Section Title */}
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold text-gray-900 mb-4">ุฅุนุฏุงุฏุงุช ุงูุงุฎุชุจุงุฑ</h2>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            ุงุฎุชุฑ ุงูุฅุนุฏุงุฏุงุช ุงูููุงุณุจุฉ ูู ูุจุฏุก ุชุฌุฑุจุฉ ุงุฎุชุจุงุฑ ูุฎุตุตุฉ ููุนุงูุฉ
          </p>
        </div>

        {/* Configuration Cards - 4 cards side by side */}
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6 mb-12">
          {/* Question Type Filter */}
          <Card className="text-right border-2 border-transparent shadow-xl bg-white/80 backdrop-blur-sm hover:shadow-2xl transition-all duration-300 transform hover:scale-105">
            <CardHeader className="pb-4">
              <div className="flex items-center justify-center mb-4">
                <div className="bg-gradient-to-r from-emerald-500 to-teal-500 rounded-full p-3 transition-transform duration-300 hover:scale-110">
                  <Filter className="h-6 w-6 text-white" />
                </div>
              </div>
              <CardTitle className="text-center text-lg font-bold text-gray-900">
                ููุน ุงูุฃุณุฆูุฉ
              </CardTitle>
              <CardDescription className="text-center text-gray-600 text-sm">
                ุงุฎุชุฑ ููุน ุงุณุฆูุฉ ุงูุงุฎุชุจุงุฑ
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <RadioGroup 
                value={questionTypeFilter} 
                onValueChange={(value) => {
                  updateSetting('questionTypeFilter', value);
                }}
              >
                <div 
                  className={`rounded-lg border-2 transition-all duration-300 hover:shadow-md hover:scale-[1.02] cursor-pointer ${questionTypeFilter === 'all' ? 'bg-gradient-to-r from-purple-50 to-pink-50 border-purple-400 shadow-md p-3' : 'bg-white border-gray-200 p-3 hover:border-purple-300 hover:bg-purple-50'}`}
                >
                  <div className="flex items-center space-x-2 space-x-reverse">
                    <RadioGroupItem value="all" id="all-types" className="text-purple-600" />
                    <Label htmlFor="all-types" className="cursor-pointer flex-1 text-right">
                      <div>
                        <div className="font-bold text-gray-900 text-sm mb-1">ุฌููุน ุงูุฃููุงุน</div>
                        <div className="text-xs text-gray-600">ุงุฎุชุจุงุฑ ุดุงูู ุนูู ุฌููุน ุงููุงุน ุงูุงุณุฆูุฉ</div>
                      </div>
                    </Label>
                  </div>
                </div>
                <div 
                  className={`rounded-lg border-2 transition-all duration-300 hover:shadow-md hover:scale-[1.02] cursor-pointer ${questionTypeFilter === 'specific' ? 'bg-gradient-to-r from-purple-50 to-pink-50 border-purple-400 shadow-md p-3' : 'bg-white border-gray-200 p-3 hover:border-purple-300 hover:bg-purple-50'}`}
                >
                  <div className="flex items-center space-x-2 space-x-reverse">
                    <RadioGroupItem value="specific" id="specific-type" className="text-purple-600" />
                    <Label htmlFor="specific-type" className="cursor-pointer flex-1 text-right">
                      <div>
                        <div className="font-bold text-gray-900 text-sm mb-1">ููุน ูุนูู</div>
                        <div className="text-xs text-gray-600">ุชุฏุฑูุจ ูุฑูุฒ ุนูู ููุน ูุงุญุฏ</div>
                      </div>
                    </Label>
                  </div>
                </div>
              </RadioGroup>
              
              {/* Fixed layout shift solution for question type dropdown */}
              <div className={`mt-4 space-y-3 transition-opacity duration-300 ${questionTypeFilter === 'specific' ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}>
                <div className={`transition-all duration-300 overflow-hidden ${questionTypeFilter === 'specific' ? 'max-h-[100px]' : 'max-h-0'}`}>
                  <label className="text-xs font-bold block text-right text-gray-900 mb-1" dir="rtl">
                    ุงุฎุชุฑ ููุน ุงูุฃุณุฆูุฉ:
                  </label>
                  <select
                    value={selectedQuestionType}
                    onChange={e => updateSetting('selectedQuestionType', e.target.value)}
                    className="w-full h-10 border-2 border-gray-200 rounded-md bg-white text-gray-900 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-400 transition"
                  >
                    {questionTypes.map(type => (
                      <option key={type.value} value={type.value}>
                        {type.label}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Exam Mode Configuration */}
          <Card className="text-right border-2 border-transparent shadow-xl bg-white/80 backdrop-blur-sm hover:shadow-2xl transition-all duration-300 transform hover:scale-105">
            <CardHeader className="pb-4">
              <div className="flex items-center justify-center mb-4">
                <div className="bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full p-3 transition-transform duration-300 hover:scale-110">
                  <BookOpen className="h-6 w-6 text-white" />
                </div>
              </div>
              <CardTitle className="text-center text-lg font-bold text-gray-900">
                ููุท ุงูุงุฎุชุจุงุฑ
              </CardTitle>
              <CardDescription className="text-center text-gray-600 text-sm">
                ุงุฎุชุฑ ุทุฑููุฉ ุนุฑุถ ุงูุฃุณุฆูุฉ
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <RadioGroup 
                value={examMode} 
                onValueChange={(value) => {
                  updateSetting('examMode', value);
                }}
              >
                <div 
                  className={`rounded-lg border-2 transition-all duration-300 hover:shadow-md hover:scale-[1.02] cursor-pointer ${examMode === 'sectioned' ? 'bg-gradient-to-r from-purple-50 to-pink-50 border-purple-400 shadow-md p-3' : 'bg-white border-gray-200 p-3 hover:border-purple-300 hover:bg-purple-50'}`}
                >
                  <div className="flex items-center space-x-2 space-x-reverse">
                    <RadioGroupItem value="sectioned" id="sectioned" className="text-purple-600" />
                    <Label htmlFor="sectioned" className="cursor-pointer flex-1 text-right">
                      <div>
                        <div className="font-bold text-gray-900 text-sm mb-1">ุฃูุณุงู ูุน ูุฑุงุฌุนุฉ</div>
                        <div className="text-xs text-gray-600">
                          ุงุฎุชุจุงุฑ ููุณู ูุน ุงููุงููุฉ ุงููุฑุงุฌุนุฉ
                        </div>
                      </div>
                    </Label>
                  </div>
                </div>
                <div 
                  className={`rounded-lg border-2 transition-all duration-300 hover:shadow-md hover:scale-[1.02] cursor-pointer ${examMode === 'single' ? 'bg-gradient-to-r from-purple-50 to-pink-50 border-purple-400 shadow-md p-3' : 'bg-white border-gray-200 p-3 hover:border-purple-300 hover:bg-purple-50'}`}
                >
                  <div className="flex items-center space-x-2 space-x-reverse">
                    <RadioGroupItem value="single" id="single" className="text-purple-600" />
                    <Label htmlFor="single" className="cursor-pointer flex-1 text-right">
                      <div>
                        <div className="font-bold text-gray-900 text-sm mb-1">ูุฌูุน ูู ูุณู ูุงุญุฏ</div>
                        <div className="text-xs text-gray-600">
                          ุฌููุน ุงูุฃุณุฆูุฉ ูุชุชุงููุฉ ุจุฏูู ุชููู
                        </div>
                      </div>
                    </Label>
                  </div>
                </div>
              </RadioGroup>
            </CardContent>
          </Card>

          {/* Timer Configuration */}
          <Card className="text-right border-2 border-transparent shadow-xl bg-white/80 backdrop-blur-sm hover:shadow-2xl transition-all duration-300 transform hover:scale-105">
            <CardHeader className="pb-4">
              <div className="flex items-center justify-center mb-4">
                <div className="bg-gradient-to-r from-purple-500 to-orange-500 rounded-full p-3 transition-transform duration-300 hover:scale-110">
                  <Clock className="h-6 w-6 text-white" />
                </div>
              </div>
              <CardTitle className="text-center text-lg font-bold text-gray-900">
                ุฅุนุฏุงุฏุงุช ุงููุคูุช
              </CardTitle>
              <CardDescription className="text-center text-gray-600 text-sm">
                ุงุฎุชุฑ ููุท ุงููุคูุช ุงูููุงุณุจ
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <RadioGroup 
                value={timerMode} 
                onValueChange={(value) => {
                  updateSetting('timerMode', value);
                }}
              >
                <div 
                  className={`rounded-lg border-2 transition-all duration-300 hover:shadow-md hover:scale-[1.02] cursor-pointer ${timerMode === 'none' ? 'bg-gradient-to-r from-purple-50 to-pink-50 border-purple-400 shadow-md p-3' : 'bg-white border-gray-200 p-3 hover:border-purple-300 hover:bg-purple-50'}`}
                >
                  <div className="flex items-center space-x-2 space-x-reverse">
                    <RadioGroupItem value="none" id="no-timer" className="text-purple-600" />
                    <Label htmlFor="no-timer" className="cursor-pointer flex-1 text-right">
                      <div>
                        <div className="font-bold text-gray-900 text-sm mb-1">ุจุฏูู ูุคูุช</div>
                        <div className="text-xs text-gray-600">
                          ุงุฎุชุจุงุฑ ุจุฏูู ูุคูุช
                        </div>
                      </div>
                    </Label>
                  </div>
                </div>
                <div 
                  className={`rounded-lg border-2 transition-all duration-300 hover:shadow-md hover:scale-[1.02] cursor-pointer ${timerMode === 'total' ? 'bg-gradient-to-r from-purple-50 to-pink-50 border-purple-400 shadow-md p-3' : 'bg-white border-gray-200 p-3 hover:border-purple-300 hover:bg-purple-50'}`}
                >
                  <div className="flex items-center space-x-2 space-x-reverse">
                    <RadioGroupItem value="total" id="total-timer" className="text-purple-600" />
                    <Label htmlFor="total-timer" className="cursor-pointer flex-1 text-right">
                      <div>
                        <div className="font-bold text-gray-900 text-sm mb-1">ูุน ูุคูุช</div>
                        <div className="text-xs text-gray-600">
                          ุงุฎุชุจุงุฑ ูุน ูุคูุช
                        </div>
                      </div>
                    </Label>
                  </div>
                </div>
              </RadioGroup>
              
              {/* Fixed layout shift solution for timer dropdown */}
              <div className={`mt-4 space-y-3 transition-opacity duration-300 ${timerMode !== 'none' ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}>
                <div className={`transition-all duration-300 overflow-hidden ${timerMode !== 'none' ? 'max-h-[100px]' : 'max-h-0'}`}>
                  <label className="text-xs font-bold block text-right text-gray-900 mb-1" dir="rtl">
                    ูุฏุฉ ุงููุคูุช:
                  </label>
                  <select
                    value={selectedTimerDuration}
                    onChange={e => updateSetting('selectedTimerDuration', parseInt(e.target.value))}
                    className="w-full h-10 border-2 border-gray-200 rounded-md bg-white text-gray-900 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-400 transition"
                  >
                    {[5,10,13,15,20,25,30,45,60,90,120].map(val => (
                      <option key={val} value={val}>{val} ุฏูููุฉ</option>
                    ))}
                  </select>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Reading Comprehension Order - Moved to be last */}
          <Card className="text-right border-2 border-transparent shadow-xl bg-white/80 backdrop-blur-sm hover:shadow-2xl transition-all duration-300 transform hover:scale-105">
            <CardHeader className="pb-4">
              <div className="flex items-center justify-center mb-4">
                <div className="bg-gradient-to-r from-indigo-500 to-purple-500 rounded-full p-3 transition-transform duration-300 hover:scale-110">
                  <Target className="h-6 w-6 text-white" />
                </div>
              </div>
              <CardTitle className="text-center text-lg font-bold text-gray-900">
                ุชุฑุชูุจ ุงุณุชูุนุงุจ ุงูููุฑูุก
              </CardTitle>
              <CardDescription className="text-center text-gray-600 text-sm">
                ุงุฎุชุฑ ุชุฑุชูุจ ุฃุณุฆูุฉ ุงุณุชูุนุงุจ ุงูููุฑูุก
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <RadioGroup 
                value={rcQuestionOrder} 
                onValueChange={(value) => {
                  updateSetting('rcQuestionOrder', value);
                }}
              >
                <div 
                  className={`rounded-lg border-2 transition-all duration-300 hover:shadow-md hover:scale-[1.02] cursor-pointer ${rcQuestionOrder === 'sequential' ? 'bg-gradient-to-r from-purple-50 to-pink-50 border-purple-400 shadow-md p-3' : 'bg-white border-gray-200 p-3 hover:border-purple-300 hover:bg-purple-50'}`}
                >
                  <div className="flex items-center space-x-2 space-x-reverse">
                    <RadioGroupItem value="sequential" id="sequential" className="text-purple-600" />
                    <Label htmlFor="sequential" className="cursor-pointer flex-1 text-right">
                      <div>
                        <div className="font-bold text-gray-900 text-sm mb-1">ูุชุชุงููุฉ</div>
                        <div className="text-xs text-gray-600">
                          ุฃุณุฆูุฉ ูู ููุณ ุงููุต ุชุฃุชู ูุชุชุงุจุนุฉ
                        </div>
                      </div>
                    </Label>
                  </div>
                </div>
                <div 
                  className={`rounded-lg border-2 transition-all duration-300 hover:shadow-md hover:scale-[1.02] cursor-pointer ${rcQuestionOrder === 'random' ? 'bg-gradient-to-r from-purple-50 to-pink-50 border-purple-400 shadow-md p-3' : 'bg-white border-gray-200 p-3 hover:border-purple-300 hover:bg-purple-50'}`}
                >
                  <div className="flex items-center space-x-2 space-x-reverse">
                    <RadioGroupItem value="random" id="random" className="text-purple-600" />
                    <Label htmlFor="random" className="cursor-pointer flex-1 text-right">
                      <div>
                        <div className="font-bold text-gray-900 text-sm mb-1">ุนุดูุงุฆูุฉ</div>
                        <div className="text-xs text-gray-600">
                          ุชูุฒูุน ุนุดูุงุฆู ูุงูู ููุฃุณุฆูุฉ
                        </div>
                      </div>
                    </Label>
                  </div>
                </div>
              </RadioGroup>
            </CardContent>
          </Card>
        </div>

        {/* Start Button Section */}
        <div className="text-center">
          <div className="bg-white/60 backdrop-blur-sm rounded-2xl p-8 shadow-xl border border-white/20 hover:shadow-2xl transition-all duration-300 max-w-4xl mx-auto">
            <div className="mb-6">
              <h3 className="text-2xl font-bold text-gray-900 mb-2">ุฌุงูุฒ ููุจุฏุกุ</h3>
              <p className="text-gray-600">
                {questionTypeFilter === 'specific' 
                  ? `ุงุฎุชุจุงุฑ ${getQuestionTypeInfo()?.label} - ${examMode === 'sectioned' ? 'ูุน ูุฑุงุฌุนุฉ' : 'ูุชุชุงูู'} - ${timerMode === 'none' ? 'ุจุฏูู ูุคูุช' : `${selectedTimerDuration} ุฏูููุฉ`}`
                  : `ุงุฎุชุจุงุฑ ุดุงูู - ${examMode === 'sectioned' ? 'ูุน ูุฑุงุฌุนุฉ' : 'ูุชุชุงูู'} - ${timerMode === 'none' ? 'ุจุฏูู ูุคูุช' : `${selectedTimerDuration} ุฏูููุฉ`}`
                }
              </p>
            </div>
            
            <Button 
              onClick={handleStartExam}
              size="lg"
              className="px-12 py-6 text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
            >
              <Play className="h-7 w-7 ml-3" />
              ุจุฏุก ุงูุงุฎุชุจุงุฑ
              <ArrowRight className="h-6 w-6 mr-3" />
            </Button>
            
            {questionTypeFilter === 'specific' && (
              <div className="mt-4 inline-flex items-center gap-2 bg-purple-100 text-purple-800 px-4 py-2 rounded-full text-sm font-medium hover:bg-purple-200 transition-colors">
                <Target className="h-4 w-4" />
                <span>{getQuestionTypeInfo()?.label}</span>
              </div>
            )}
          </div>
        </div>
        
        {/* Features Section */}
        <div className="mt-16 grid md:grid-cols-3 gap-8">
          <div className="text-center p-6 bg-white rounded-xl shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105">
            <div className="bg-blue-100 rounded-full p-4 w-16 h-16 mx-auto mb-4 flex items-center justify-center hover:bg-blue-200 transition-colors">
              <Target className="h-8 w-8 text-blue-600" />
            </div>
            <h3 className="text-lg font-bold text-gray-900 mb-2">ุชุฏุฑูุจ ูุฎุตุต</h3>
            <p className="text-gray-600 text-sm">ุงุฎุชุฑ ููุน ุงูุฃุณุฆูุฉ ุงูุชู ุชุฑูุฏ ุงูุชุฑููุฒ ุนูููุง</p>
          </div>
          
          <div className="text-center p-6 bg-white rounded-xl shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105">
            <div className="bg-green-100 rounded-full p-4 w-16 h-16 mx-auto mb-4 flex items-center justify-center hover:bg-green-200 transition-colors">
              <Settings className="h-8 w-8 text-green-600" />
            </div>
            <h3 className="text-lg font-bold text-gray-900 mb-2">ุฅุนุฏุงุฏุงุช ูุฑูุฉ</h3>
            <p className="text-gray-600 text-sm">ุชุญูู ูุงูู ูู ููุช ุงูุงุฎุชุจุงุฑ ูููุท ุงูุนุฑุถ</p>
          </div>
          
          <div className="text-center p-6 bg-white rounded-xl shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105">
            <div className="bg-purple-100 rounded-full p-4 w-16 h-16 mx-auto mb-4 flex items-center justify-center hover:bg-purple-200 transition-colors">
              <CheckCircle className="h-8 w-8 text-purple-600" />
            </div>
            <h3 className="text-lg font-bold text-gray-900 mb-2">ุชูููู ููุฑู</h3>
            <p className="text-gray-600 text-sm">ุงุญุตู ุนูู ุงููุชุงุฆุฌ ูุงูุชุญููู ููุฑ ุงูุชูุงุก ุงูุงุฎุชุจุงุฑ</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default StartScreen;